# -*- coding: utf-8 -*-
"""Runtime DA Harsh Rana.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GccMe8Kuc3uGR7kf6MZZrD6Yz2fTN_ds

# Data Preperation
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load the data from the CSV files
cities = pd.read_csv('/content/drive/MyDrive/Data Science/Projects/Data Sets/dim_cities.csv')
respondents = pd.read_csv('/content/drive/MyDrive/Data Science/Projects/Data Sets/dim_repondents.csv')
survey_responses = pd.read_csv('/content/drive/MyDrive/Data Science/Projects/Data Sets/fact_survey_responses.csv')

# Display the first few rows of each dataframe
(cities.head(), respondents.head(), survey_responses.head())

# Join the tables on their respective keys
data = (
    survey_responses.merge(respondents, how="left", on="Respondent_ID")
    .merge(cities, how="left", on="City_ID")
)

# Display the first few rows of the merged DataFrame
pd.set_option('display.max_columns', None)
data.head()

data['Improvements_desired'].value_counts()

"""## Sense Check"""

# Check for inconsistent responses
inconsistent_responses = data[(data['Heard_before'] == 'No') & (data['Taste_experience'] != 0)]
inconsistent_responses.head()

"""The initial sense-check reveals some inconsistencies in the responses. There are respondents who reported that they hadn't heard about the drink but still provided a taste experience rating. This could indicate insincere or mistaken responses.

A potential approach to handle this could be to treat these inconsistent records as missing data or outliers, and exclude them from the analysis.
"""

# Count the number of inconsistent responses
num_inconsistent_responses = inconsistent_responses.shape[0]

# Calculate the percentage of inconsistent responses
percentage_inconsistent = (num_inconsistent_responses / data.shape[0]) * 100

num_inconsistent_responses, percentage_inconsistent

"""# Primary Insights

## Demographic Insights

### Who are the Respondents?
"""

# Count the number of responses by gender
gender_preference = data['Gender'].value_counts()

# Display the result
gender_preference

import matplotlib.pyplot as plt

# Create a bar plot for gender preference
plt.figure(figsize=(10, 6))
gender_preference.plot(kind='bar', color=['skyblue', 'pink', 'purple'])
plt.title('Survey Responses by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Responses')
plt.xticks(rotation=0)
plt.show()

import matplotlib.pyplot as plt

# Create a bar plot for gender preference
plt.figure(figsize=(10, 6))
gender_preference.plot(kind='bar', color=['skyblue', 'pink', 'purple'])
plt.title('Survey Responses by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Responses')
plt.xticks(rotation=0)
plt.show()
import matplotlib.pyplot as plt

# Create a bar plot for gender preference
plt.figure(figsize=(10, 6))
gender_preference.plot(kind='bar', color=['skyblue', 'pink', 'purple'])
plt.title('Survey Responses by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Responses')
plt.xticks(rotation=0)
plt.show()
import matplotlib.pyplot as plt

# Create a bar plot for gender preference
plt.figure(figsize=(10, 6))
gender_preference.plot(kind='bar', color=['skyblue', 'pink', 'purple'])
plt.title('Survey Responses by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Responses')
plt.xticks(rotation=0)
plt.show()

# Calculate the number of responses by age
age_preference = data['Age'].value_counts()

# Create a bar plot for age preference
plt.figure(figsize=(10, 6))
age_preference.plot(kind='bar', color=['skyblue', 'pink', 'purple'])
plt.title('Survey Responses by Age')
plt.xlabel('Age') # Changed x-axis label to 'Age'
plt.ylabel('Number of Responses')
plt.xticks(rotation=0)
plt.show()

# Grouping the data by 'Gender' and 'Age' and calculating the count
gender_age = data.groupby(['Gender', 'Age'])['Response_ID'].count().unstack()

# Plotting the consumption frequency heatmap
import seaborn as sns
plt.figure(figsize=(12, 8))
sns.heatmap(gender_age, annot=True, cmap='YlGnBu', fmt='g')
plt.title('Survey Responses by Gender and Age')
plt.xlabel('Age')
plt.ylabel('Gender')
plt.show()

"""### Who drinks energy most frequently?"""

# Calculate the percentage of each gender group that prefers energy drinks
consume_frequency = ['Daily', '2-3 times a week']

gender_preference = data[data['Consume_frequency'].isin(consume_frequency)].groupby('Gender').size()
gender_total = data['Gender'].value_counts()
gender_preference_percentage = (gender_preference / gender_total) * 100

gender_preference_percentage

# Plotting the percentage of each gender group

import seaborn as sns
plt.figure(figsize=(8, 6))
sns.barplot(x=gender_preference_percentage.index, y=gender_preference_percentage.values)
plt.title('Percentage of Each Gender Group Who Drinks Daily and 2-3 Times a Week')
plt.xlabel('Gender')
plt.ylabel('Percentage')
plt.show()

# Calculate the percentage of each gender group that prefers energy drinks
consume_frequency = ['Daily', '2-3 times a week']

age_preference = data[data['Consume_frequency'].isin(consume_frequency)].groupby('Age').size()
age_total = data['Age'].value_counts()
Age_drinking_frequency = (age_preference / age_total) * 100

Age_drinking_frequency

# Plotting the percentage of each gender group

import seaborn as sns
plt.figure(figsize=(8, 6))
sns.barplot(x=Age_drinking_frequency.index, y=Age_drinking_frequency.values)
plt.title('Percentage of Each Age Group Who Drinks Daily and 2-3 Times a Week')
plt.xlabel('Gender')
plt.ylabel('Percentage')
plt.show()

age_preference = data[data['Consume_frequency'].isin(consume_frequency)].groupby(['Gender','Age']).size()

age_preference

# Calculate the count of respondents for each combination of gender and age group
gender_age_counts = data.groupby(['Gender', 'Age']).size().reset_index(name='Count')

# Find the combination with the highest count
most_preferred_combination = gender_age_counts[gender_age_counts['Count'] == gender_age_counts['Count']]

most_preferred_combination

data["Gender"].value_counts()

# Calculate the count of respondents for each combination of gender and age group
gender_age_counts = data.groupby(['Gender', 'Age']).size().reset_index(name='Count')

# Find the combination with the highest count
most_preferred_combination = gender_age_counts[gender_age_counts['Count'] == gender_age_counts['Count']]

# Divide the count column by the total number per gender
gender_counts = data['Gender'].value_counts()
most_preferred_combination['Percentage'] = most_preferred_combination.apply(lambda row: row['Count'] / gender_counts[row['Gender']], axis=1)

most_preferred_combination

import seaborn as sns
import matplotlib.pyplot as plt

# Plotting the percentage count as a bar chart
plt.figure(figsize=(8, 6))
sns.barplot(x='Gender', y='Percentage', hue='Age', data=most_preferred_combination)
plt.title('Percentage of Most Preferred Combination by Gender and Age Group')
plt.xlabel('Gender')
plt.ylabel('Percentage')
plt.show()

# Grouping the data by 'Gender' and 'Age' and calculating the consume frequency count
gender_age_consume = data.groupby(['Gender', 'Age'])['Consume_frequency'].value_counts().unstack().fillna(0)

gender_age_consume

# Plotting the consumption frequency heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(gender_age_consume, annot=True, cmap='YlGnBu', fmt='g')
plt.title('Consumption Frequency of Energy Drinks by Gender and Age')
plt.xlabel('Consume Frequency')
plt.ylabel('Gender - Age')
plt.show()

# Calculate the percentage of each consumption frequency category within each gender and age group combination
gender_age_consume_percentage = gender_age_consume.div(gender_age_consume.sum(axis=1), axis=0) * 100

gender_age_consume_percentage

# Plotting the consumption frequency heatmap as a percentage
plt.figure(figsize=(12, 8))
sns.heatmap(gender_age_consume_percentage, annot=True, cmap='YlGnBu', fmt='.1f')
plt.title('Percentage of Consumption Frequency of Energy Drinks by Gender and Age')
plt.xlabel('Consume Frequency')
plt.ylabel('Gender - Age')
plt.show()

# Plotting the combination of gender and age group
plt.figure(figsize=(10, 6))
sns.barplot(x='Gender', y='Count', hue='Age', data=most_preferred_combination)
plt.title('Preference for Energy Drinks by Gender and Age Group')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

"""### Who has a negative perception towards energy drinks yet still drinks on a regular basis?"""

data['General_perception'].value_counts()

# Filter the merged data to include only those where General_perception is either 'Healthy' or 'Effective'
filtered_responses = data[data['General_perception'].isin(['Not sure', 'Dangerous'])]

# Group by gender and count the responses
gender_perception = filtered_responses.groupby('Gender')['General_perception'].value_counts().unstack()

# Add a total column
gender_perception['Total'] = gender_perception.sum(axis=1)

# Display the updated dataframe
gender_perception

# Plot the perceptions
gender_perception[['Not sure', 'Dangerous']].plot(kind='bar', stacked=True)
plt.title('Perception of Energy Drinks by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Respondents')
plt.legend(title='Perception')
plt.show()

# Filter the data to include only those where General_perception is either 'Not sure' or 'Dangerous',
# or where Improvements_desired is 'Healthier alternatives' or 'More natural ingredients'
filtered_responses = data[(data['General_perception'].isin(['Not sure', 'Dangerous'])) |
                          (data['Improvements_desired'].isin(['Healthier alternatives', 'More natural ingredients']))]

# Define the consume frequency categories of interest
consume_frequency = ['2-3 times a week', 'Daily']

# Filter the responses to include only those with the desired consume frequency
filtered_responses = filtered_responses[filtered_responses['Consume_frequency'].isin(consume_frequency)]

# Group the filtered responses by gender and age, and count the size of each group
gender_age_drinking_frequency = filtered_responses.groupby(['Gender', 'Age']).size()

# Display the result
gender_age_drinking_frequency

# Import necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Convert the series to a DataFrame and reset the index
Target_Market = gender_age_drinking_frequency.reset_index()

# Rename the 0 column to 'Count'
Target_Market = Target_Market.rename(columns={0: 'Count'})

# Create a pivot table for the heatmap
pivot_table = Target_Market.pivot(index='Gender', columns='Age', values='Count') # Corrected the pivot function call

# Create the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(pivot_table, annot=True, cmap='YlGnBu', fmt='g')
plt.title('Target Market: Attracting Energy Drink Lovers Seeking Better Options')
plt.show()

# Filter the data to create the new DataFrame
tm_df = data[(data['Consume_frequency'].isin(['2-3 times a week', 'Daily'])) &
             ((data['General_perception'].isin(['Not sure', 'Dangerous'])) |
              (data['Improvements_desired'].isin(['Healthier alternatives', 'More natural ingredients'])))]

# Display the first few rows of the new DataFrame
tm_df.head()

# Filter the merged data to include only those where General_perception is either 'Healthy' or 'Effective'
filtered_responses = data[data['General_perception'].isin(['Healthy', 'Effective'])]

# Group by gender and count the responses
gender_and_age_perception = filtered_responses.groupby(['Gender','Age'])['General_perception'].value_counts().unstack()

# Add a total column
gender_and_age_perception['Total'] = gender_and_age_perception.sum(axis=1)

# Display the updated dataframe
gender_and_age_perception

# Filter the merged data to include only those where General_perception is either 'Healthy' or 'Effective'
filtered_responses = data[data['General_perception'].isin(['Healthy', 'Effective'])]

# Group by gender and count the responses
gender_and_age_perception = filtered_responses.groupby(['Gender','Age'])['General_perception'].value_counts().unstack()

# Add a total column
gender_and_age_perception['Total'] = gender_and_age_perception.sum(axis=1)

# Display the updated dataframe
gender_and_age_perception

# Calculate the count of responses per gender
gender_counts = filtered_responses['Gender'].value_counts()

def gender_totals(row):
    if row.name[0] == 'Male':
        return row['Total'] / gender_counts['Male']
    elif row.name[0] == 'Female':
        return row['Total'] / gender_counts['Female']
    else:
        return row['Total'] / gender_counts['Non-binary']

# Divide the 'Total' column by the total number per gender
gender_and_age_perception['Percentage'] = gender_and_age_perception.apply(gender_totals, axis=1)

gender_and_age_perception

import seaborn as sns
import matplotlib.pyplot as plt

# Reset the index of gender_perception
gender_and_age_perception = gender_and_age_perception.reset_index()

# Plotting the bar chart
plt.figure(figsize=(10, 6))
sns.barplot(x='Gender', y='Percentage', hue='Age', data=gender_and_age_perception)
plt.title('Perception of Energy Drinks by Gender and Age Group')
plt.xlabel('Gender')
plt.ylabel('Percentage')
plt.show()

"""### Which type of marketing reaches the most Youth (15-30)?"""

# Filter the dataframe for the 15-30 age group
youth_df = data[data['Age'].isin(['15-18', '19-30'])]

# Count the number of responses by marketing channel
marketing_channels = youth_df['Marketing_channels'].value_counts()

# Display the result
marketing_channels

# Create a bar plot for marketing channel effectiveness
plt.figure(figsize=(10, 6))
marketing_channels.plot(kind='bar', color='green')
plt.title('Effectiveness of Marketing Channels for Youth (15-30)')
plt.xlabel('Marketing Channel')
plt.ylabel('Number of Responses')
plt.xticks(rotation=30, ha='right')
plt.show()

"""The effectiveness of different marketing channels in reaching the youth (15-30 years old), according to the survey responses, is as follows:

Online ads: 3373 responses
TV commercials: 1785 responses
Outdoor billboards: 702 responses
Other: 702 responses
Print media: 446 responses
This suggests that online ads are the most effective marketing channel for reaching youth (15-30 years old), according to the survey responses.

"""

# Count the number of responses by marketing channel
tm_marketing_channels = tm_df['Marketing_channels'].value_counts()

# Display the result
tm_marketing_channels

# Create a bar plot for marketing channel effectiveness
plt.figure(figsize=(10, 6))
tm_marketing_channels.plot(kind='bar', color='green')
plt.title('Effectiveness of Marketing Channels for our Target Market')
plt.xlabel('Marketing Channel')
plt.ylabel('Number of Responses')
plt.xticks(rotation=30, ha='right')
plt.show()

"""### How does brand perception vary across different age groups and genders?"""

# Check how brand perception varies across different age groups
brand_perception_by_age = data.groupby('Age')['Brand_perception'].value_counts(normalize=True).unstack()

# Check how brand perception varies across different genders
brand_perception_by_gender = data.groupby('Gender')['Brand_perception'].value_counts(normalize=True).unstack()

brand_perception_by_age, brand_perception_by_gender

import matplotlib.pyplot as plt
import seaborn as sns

# Set the style for seaborn plot
sns.set(style="whitegrid")

# Brand Perception by Age
plt.figure(figsize=(10, 6))
sns.heatmap(brand_perception_by_age, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('Brand Perception by Age')
plt.ylabel('')
plt.show()

# Brand Perception by Gender
plt.figure(figsize=(10, 4))
sns.heatmap(brand_perception_by_gender, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('Brand Perception by Gender')
plt.ylabel('')
plt.show()

"""**Brand Perception by Age:**

This heatmap shows the proportion of each brand perception category ("Negative", "Neutral", "Positive") within each age group. The darker the color, the higher the proportion. From the heatmap, it is evident that the brand perception is mostly neutral across all age groups. However, the age group of 65+ years has a relatively higher percentage of positive brand perception compared to other age groups.

**Brand Perception by Gender:**

This heatmap shows the proportion of each brand perception category within each gender. Again, the brand perception is mostly neutral across all genders. But, the Non-binary group has a slightly higher percentage of neutral brand perception, and Females have a slightly higher percentage of negative brand perception.

These insights can be used to guide marketing strategies and efforts, such as crafting gender- and age-specific marketing messages.

### What type of packaging is preferred by different age groups and genders?
"""

# Check packaging preference across different age groups
packaging_pref_by_age = data.groupby('Age')['Packaging_preference'].value_counts(normalize=True).unstack()

# Check packaging preference across different genders
packaging_pref_by_gender = data.groupby('Gender')['Packaging_preference'].value_counts(normalize=True).unstack()

packaging_pref_by_age, packaging_pref_by_gender

# Packaging Preference by Age
plt.figure(figsize=(12, 6))
sns.heatmap(packaging_pref_by_age, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('Packaging Preference by Age')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.show()

# Packaging Preference by Gender
plt.figure(figsize=(12, 3))
sns.heatmap(packaging_pref_by_gender, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('Packaging Preference by Gender')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.show()

"""**Packaging Preference by Age:**

This heatmap shows the proportion of each packaging preference category within each age group. The darker the color, the higher the proportion. The most preferred type of packaging across all age groups is "Compact and portable cans", followed by "Innovative bottle design".

**Packaging Preference by Gender:**

This heatmap shows the proportion of each packaging preference category within each gender. Again, "Compact and portable cans" is the most preferred type of packaging across all genders, followed by "Innovative bottle design".

These visualizations can help the marketing team understand the packaging preferences of different demographics and guide packaging design decisions. For instance, they could focus on making the cans more compact and portable, and incorporate innovative design elements that appeal to younger demographics.

### What are the main Reasons for per consumption per demographic group?
"""

# Check the main reasons for consuming energy drinks across different age groups
reasons_by_age = data.groupby('Age')['Consume_reason'].value_counts(normalize=True).unstack()

# Check the main reasons for consuming energy drinks across different genders
reasons_by_gender = data.groupby('Gender')['Consume_reason'].value_counts(normalize=True).unstack()

reasons_by_age, reasons_by_gender

"""From this analysis, we can observe:

Across all demographics, the most common reason for consuming energy drinks is "Increased energy and focus".
The second most common reason varies: for the age group it's "To combat fatigue", while for the gender group it's different for each gender.
Other observations include: "To enhance sports performance" is relatively more common among Males and the 46-65 age group; the "Other" reason is particularly high among Females.
These insights can help in crafting marketing messages that align with the main reasons why different demographic groups consume energy drinks.
"""

# Main Reasons for Consumption by Age
plt.figure(figsize=(14, 6))
sns.heatmap(reasons_by_age, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('Main Reasons for Consumption by Age')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.show()

# Main Reasons for Consumption by Gender
plt.figure(figsize=(14, 3))
sns.heatmap(reasons_by_gender, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('Main Reasons for Consumption by Gender')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.show()

"""**Main Reasons for Consumption by Age:**

This heatmap shows the proportion of each reason for consumption within each age group. The most common reason across all age groups is "Increased energy and focus", followed by "To combat fatigue".

**Main Reasons for Consumption by Gender:**

This heatmap shows the proportion of each reason for consumption within each gender. "Increased energy and focus" is the most common reason across all genders, with Males showing a notably higher proportion. Females show a relatively high proportion for "To combat fatigue".

### What is the perception of energy drinks in general per demographic
"""

# Check the perception of energy drinks in general across different age groups
perception_by_age = data.groupby('Age')['General_perception'].value_counts(normalize=True).unstack()

# Check the perception of energy drinks in general across different genders
perception_by_gender = data.groupby('Gender')['General_perception'].value_counts(normalize=True).unstack()

perception_by_age, perception_by_gender

"""The age groups of 31-45 and 46-65 perceive energy drinks as more dangerous compared to other age groups.
The 15-18 and 65+ age groups, and all genders, are relatively unsure about their perception of energy drinks.
Males perceive energy drinks as more effective compared to Females and Non-binary groups.
These insights can help in crafting marketing messages that address these perceptions. For instance, messages for the 31-45 and 46-65 age groups could aim to address safety concerns, while messages for Males could leverage the perception of effectiveness.
"""

# General Perception by Age
plt.figure(figsize=(10, 6))
sns.heatmap(perception_by_age, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('General Perception of Energy Drinks by Age')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.show()

# General Perception by Gender
plt.figure(figsize=(10, 4))
sns.heatmap(perception_by_gender, cmap="YlGnBu", annot=True, fmt=".1%", cbar=False)
plt.title('General Perception of Energy Drinks by Gender')
plt.ylabel('')
plt.xticks(rotation=45, ha='right')
plt.show()

"""## Consumer Preferences

### What are the preferred ingredients of energy drinks among respondents?
"""

# Check the preferred ingredients among respondents
preferred_ingredients = data['Ingredients_expected'].value_counts(normalize=True)

preferred_ingredients

"""The preferred ingredients of energy drinks among respondents are:

Caffeine: 38.96%
Vitamins: 25.34%
Sugar: 20.17%
Guarana: 15.53%
It appears that Caffeine is the most preferred ingredient among the respondents, followed by Vitamins. Guarana is the least preferred.

These insights can guide product development decisions, such as the formulation of the energy drink. For example, given the preference for Caffeine and Vitamins, the company could consider formulating a drink with these ingredients as the main components.
"""

# Create a bar plot for preferred ingredients
plt.figure(figsize=(8, 6))
sns.barplot(x=preferred_ingredients.index, y=preferred_ingredients.values, palette="Blues_d")
plt.xlabel('Ingredients')
plt.ylabel('Proportion')
plt.title('Preferred Ingredients of Energy Drinks Among Respondents')
plt.show()

"""From the bar plot, it's clear that Caffeine is the most preferred ingredient among the respondents, followed by Vitamins, Sugar, and Guarana. This visualization can provide a quick and intuitive understanding of the respondents' ingredient preferences for energy drinks.

These insights can guide product development and marketing efforts. For example, the company could highlight the presence of preferred ingredients like Caffeine and Vitamins in their marketing messages to attract potential customers.

#### What are the preferred ingredients of energy drinks among our Target Market?
"""

# Check the preferred ingredients among respondents
tm_preferred_ingredients = tm_df['Ingredients_expected'].value_counts(normalize=True)


# Create a bar plot for preferred ingredients
plt.figure(figsize=(8, 6))
sns.barplot(x=tm_preferred_ingredients.index, y=tm_preferred_ingredients.values, palette="Blues_d")
plt.xlabel('Ingredients')
plt.ylabel('Proportion')
plt.title('Preferred Ingredients of Energy Drinks Among our Target Market')
plt.show()

"""### What packaging preferences do respondents have for energy drinks?"""

# Check the packaging preference for the general population
packaging_pref_general = data['Packaging_preference'].value_counts(normalize=True)

packaging_pref_general

"""Compact and portable cans: 39.84%
Innovative bottle design: 30.47%
Collectible packaging: 15.01%
Eco-friendly design: 9.83%
Other: 4.85%
From this, we can observe that the most preferred type of packaging among the general population is "Compact and portable cans", followed by "Innovative bottle design". The least preferred is "Other".

These insights can guide packaging design decisions. For instance, the company could focus on making the cans more compact and portable, and incorporate innovative design elements in the bottles. They could also consider improving the eco-friendliness and collectibility of their packaging to cater to those preferences.

"""

# Create a bar plot for packaging preferences for the general population
plt.figure(figsize=(8, 6))
sns.barplot(x=packaging_pref_general.index, y=packaging_pref_general.values, palette="Blues_d")
plt.xlabel('Packaging Preference')
plt.ylabel('Proportion')
plt.title('Packaging Preferences for Energy Drinks Among the General Population')
plt.xticks(rotation=45, ha='right')
plt.show()

# Check the packaging preference for the general population
packaging_pref_tm = tm_df['Packaging_preference'].value_counts(normalize=True)

# Create a bar plot for packaging preferences for the general population
plt.figure(figsize=(8, 6))
sns.barplot(x=packaging_pref_tm.index, y=packaging_pref_tm.values, palette="Blues_d")
plt.xlabel('Packaging Preference')
plt.ylabel('Proportion')
plt.title('Packaging Preferences for Energy Drinks Among Our Target Market')
plt.xticks(rotation=45, ha='right')
plt.show()

"""## Competition Analysis:

### Who are the current market leaders?
"""

# Check the current market leaders
market_leaders = data['Current_brands'].value_counts(normalize=True)

market_leaders

"""Cola-Coka: 25.38%
Bepsi: 21.12%
Gangster: 18.54%
Blue Bull: 10.58%
CodeX: 9.80%
Sky 9: 9.79%
Others: 4.79%
From this, we can observe that Cola-Coka is the most consumed brand among the respondents, followed by Bepsi and Gangster. CodeX, the brand we are analyzing, is in the fifth position, consumed by approximately 9.8% of the respondents. This indicates that CodeX has room to grow its market share.

These insights can guide marketing strategies. For instance, the company could aim to understand what makes the leading brands popular and incorporate those learnings into their product development and marketing efforts. They could also focus on differentiating CodeX from these brands to carve out a unique position in the market.
"""

# Create a bar plot for market leaders
plt.figure(figsize=(10, 6))
sns.barplot(x=market_leaders.index, y=market_leaders.values, palette="Blues_d")
plt.xlabel('Brand')
plt.ylabel('Proportion')
plt.title('Current Market Leaders Among Energy Drink Brands')
plt.show()

# Check the current market leaders
market_leaders_tm = tm_df['Current_brands'].value_counts(normalize=True)

market_leaders_tm

# Create a bar plot for market leaders
plt.figure(figsize=(10, 6))
sns.barplot(x=market_leaders_tm.index, y=market_leaders_tm.values, palette="Blues_d")
plt.xlabel('Brand')
plt.ylabel('Proportion')
plt.title('Current Market Leaders of Our Traget Market Among Energy Drink Brands')
plt.show()

"""### What are the primary reasons consumers prefer those brands over ours?"""

# Extracting the reasons for choosing other brands over ours
reasons_for_choosing_brands = data[data['Current_brands'] != 'CodeX'] ['Reasons_for_choosing_brands'].value_counts()

reasons_for_choosing_brands

"""We analyzed the 'Reasons_for_choosing_brands' column from the survey data, which provides the reasons respondents gave for choosing other brands over ours. The reasons include 'Brand reputation', 'Taste/flavor preference', 'Availability', 'Effectiveness', and 'Other'."""

# Plotting the reasons for choosing other brands
plt.figure(figsize=(10, 6))
sns.barplot(y=reasons_for_choosing_brands.index, x=reasons_for_choosing_brands.values, orient='h')
plt.title('Possible Reasons for Choosing Other Brands Over Ours')
plt.xlabel('Count')
plt.ylabel('Reasons')
plt.show()

"""From the chart, it is clear that:

'Brand reputation' is the most cited reason for respondents choosing other brands over ours. This suggests that consumers place a high value on the reputation of the brand when choosing energy drinks.

'Taste/flavor preference' and 'Availability' are the next most common reasons. This indicates that the taste of the product and its availability in the market are also significant factors influencing the brand choice of consumers.

'Effectiveness' and 'Other' reasons were less frequently cited, but still represent a considerable portion of the responses.

To improve competitiveness, CodeX could consider strategies to enhance brand reputation, cater to consumer taste preferences, ensure widespread availability of the product, and communicate its effectiveness. Moreover, it might be beneficial to investigate the 'Other' reasons in more detail to understand any additional areas for improvement.
"""

# Extracting the reasons for choosing other brands over ours
reasons_for_choosing_brands_tm = tm_df[tm_df['Current_brands'] != 'CodeX'] ['Reasons_for_choosing_brands'].value_counts()

reasons_for_choosing_brands_tm


# Plotting the reasons for choosing other brands
plt.figure(figsize=(10, 6))
sns.barplot(y=reasons_for_choosing_brands_tm.index, x=reasons_for_choosing_brands_tm.values, orient='h')
plt.title('Possible Reasons that Our Target Market Chooses Other Brands Over Ours')
plt.xlabel('Count')
plt.ylabel('Reasons')
plt.show()

"""## Marketing Channels and Brand Awareness

### Which marketing channel can be used to reach more customers?
"""

# Extracting the marketing channels data
marketing_channels = data['Marketing_channels'].value_counts()

marketing_channels

"""We analyzed the 'Marketing_channels' column from the survey data, which indicates the marketing channels through which respondents heard about energy drinks."""

# Plotting the marketing channels
plt.figure(figsize=(10, 6))
sns.barplot(x=marketing_channels.index, y=marketing_channels.values)
plt.title('Marketing Channels Reach')
plt.xlabel('Marketing Channels')
plt.ylabel('Count')
plt.show()

"""From the chart, we can see that:

'Online ads' is the marketing channel that reaches the most respondents. This suggests that digital marketing strategies, particularly online advertising, could be the most effective way to reach potential customers.

'TV commercials' is the next most effective marketing channel, reaching a substantial number of respondents. This indicates that traditional media still plays a significant role in marketing and should be considered in the marketing mix.

'Outdoor billboards', 'Other' methods, and 'Print media' reach fewer respondents, but these channels still represent a considerable portion of the market and should not be overlooked.

Overall, these insights suggest that a multi-channel marketing strategy, with a strong focus on online ads and TV commercials, could potentially reach the most customers. It could also be beneficial to investigate the 'Other' methods to understand any additional effective marketing channels.

### How effective are different marketing strategies and channels in reaching our customers?
"""

# Grouping and filtering the data to count the number of respondents who have heard before
effectiveness_df = data[data['Heard_before'] == 'Yes'].groupby('Marketing_channels').size().reset_index(name='Count')

effectiveness_df.sort_values(by='Count', ascending=False)

"""We analyzed the 'Marketing_channels' and 'Heard_before' columns from the survey data. The 'Marketing_channels' column represents the channels through which respondents heard about energy drinks, and the 'Heard_before' column represents whether respondents had heard about the product before. The count of 'Heard_before' gives us an indication of how effective each marketing channel is."""

# Plotting the effectiveness of different marketing strategies
plt.figure(figsize=(10, 6))
sns.barplot(x='Marketing_channels', y='Count', data=effectiveness_df)
plt.title('Effectiveness of Different Marketing Channels')
plt.xlabel('Marketing Channels')
plt.ylabel('Number of Respondents Who Heard Before')
plt.show()

"""From the chart, it's clear that:

'Online ads' are the most effective marketing channel, reaching the highest number of respondents who had heard about the product before. This suggests that digital marketing strategies, especially online advertising, are the most effective in reaching potential customers.

'TV commercials' are the next most effective marketing channel, reaching a significant number of respondents. This indicates that traditional media continues to play an important role in marketing and should not be overlooked.

'Outdoor billboards', 'Other' methods, and 'Print media' reach fewer respondents, but these channels still represent a considerable portion of the market.

This analysis suggests that a multi-channel marketing strategy, focusing heavily on online ads and TV commercials, could be the most effective way to reach the most customers. Additionally, it might be beneficial to further investigate the 'Other' methods to uncover any additional effective marketing channels.
"""

# Grouping and filtering the data to count the number of respondents who have heard before
effectiveness_df_tm = tm_df[tm_df['Heard_before'] == 'Yes'].groupby('Marketing_channels').size().reset_index(name='Count')

effectiveness_df_tm.sort_values(by='Count', ascending=False)


# Plotting the effectiveness of different marketing strategies
plt.figure(figsize=(10, 6))
sns.barplot(x='Marketing_channels', y='Count', data=effectiveness_df_tm)
plt.title('Effectiveness of Different Marketing Channelson Our Traget Market')
plt.xlabel('Marketing Channels')
plt.ylabel('Number of Respondents Who Heard Before')
plt.show()

"""## Brand Penetration

### What do people think about our brand?
"""

# Extracting the overall brand perception data
brand_perception = data['Brand_perception'].value_counts()

brand_perception

"""We analyzed the 'Brand_perception' column from the survey data, which provides information about how the respondents perceive our brand. The responses are categorized into 'Positive', 'Neutral', and 'Negative'."""

# Plotting the overall brand perception
plt.figure(figsize=(10, 6))
sns.barplot(x=brand_perception.index, y=brand_perception.values)
plt.title('Overall Brand Perception')
plt.xlabel('Perception')
plt.ylabel('Count')
plt.show()

"""The majority of respondents have a 'Neutral' perception of our brand. This could mean that many respondents do not have a strong opinion about the brand or are unaware of it. There's a significant opportunity here to shift this neutral perception to a positive one through effective marketing and product quality improvements.

A considerable number of respondents have a 'Positive' perception of the brand, which is a good sign. However, this group is less than half of those with a neutral perception, indicating room for improvement.

A smaller, yet significant, number of respondents have a 'Negative' perception of our brand. It's crucial to understand the reasons behind this negative perception and address them to improve overall brand perception.

Overall, these insights suggest that while the brand is perceived positively by some respondents, there is a significant opportunity to enhance brand perception, particularly among those with a neutral or negative view of the brand. This could involve improving product quality, addressing any issues causing negative perceptions, and implementing marketing strategies that effectively communicate the brand's value proposition.
"""

# Extracting the overall brand perception data
brand_perception_tm = tm_df['Brand_perception'].value_counts()

brand_perception_tm

# Plotting the overall brand perception
plt.figure(figsize=(10, 6))
sns.barplot(x=brand_perception_tm.index, y=brand_perception_tm.values)
plt.title('Target Market Brand Perception')
plt.xlabel('Perception')
plt.ylabel('Count')
plt.show()

"""### Which cities do we need to focus more on?"""

# Extracting the city-wise distribution of respondents
city_focus = data[data['Heard_before'] == 'No']['City'].value_counts()

city_focus

"""We analyzed the 'City' column from the survey data, which indicates the cities where the respondents are located. The count of respondents in each city gives us an idea of the brand's current market penetration in different cities."""

# Plotting the city-wise distribution of respondents
plt.figure(figsize=(10, 6))
sns.barplot(y=city_focus.index, x=city_focus.values, orient='h')
plt.title('City-wise Distribution of Respondents')
plt.xlabel('Count')
plt.ylabel('City')
plt.show()

"""From the chart, we can see that:

The brand has the highest penetration in Bangalore, Hyderabad, and Mumbai, as these cities have the highest number of respondents.

The brand's presence is comparatively lower in cities like Lucknow, Jaipur, and Delhi.

This suggests that there could be a significant opportunity to increase market share in cities where the brand currently has lower penetration. Focusing marketing efforts and improving product availability in these cities could potentially lead to increased brand awareness and market share. It may also be beneficial to conduct further research to understand the specific factors affecting the brand's performance in these cities.
"""

# Extracting the city-wise distribution of respondents
dw_city_focus_tm = tm_df[tm_df['Heard_before'] == 'No']['City'].value_counts()

dw_city_focus_tm

# Plotting the city-wise distribution of respondents
plt.figure(figsize=(10, 6))
sns.barplot(y=dw_city_focus_tm.index, x=dw_city_focus_tm.values, orient='h')
plt.title('City-wise Distribution of Target Market Who Are Aware of our Brand')
plt.xlabel('Count')
plt.ylabel('City')
plt.show()

# Extracting the city-wise distribution of respondents
city_focus_tm = tm_df[tm_df['Heard_before'] == 'Yes']['City'].value_counts()

city_focus_tm

# Plotting the city-wise distribution of respondents
plt.figure(figsize=(10, 6))
sns.barplot(y=city_focus_tm.index, x=city_focus_tm.values, orient='h')
plt.title('City-wise Distribution of Respondents Who Are Aware of our Brand')
plt.xlabel('Count')
plt.ylabel('City')
plt.show()

# Extracting the city-wise distribution of respondents
city_focus_tm = data[data['Heard_before'] == 'Yes']['City'].value_counts()

city_focus_tm

# Plotting the city-wise distribution of respondents
plt.figure(figsize=(10, 6))
sns.barplot(y=city_focus_tm.index, x=city_focus_tm.values, orient='h')
plt.title('City-wise Distribution of Target Market')
plt.xlabel('Count')
plt.ylabel('City')
plt.show()

"""## Purchase Behavior

### Where do respondents prefer to purchase energy drinks?
"""

# Extracting the preferred purchase locations data
purchase_location = data['Purchase_location'].value_counts()

purchase_location

"""We analyzed the 'Purchase_location' column from the survey data, which provides information about where the respondents prefer to purchase energy drinks. The responses are categorized into 'Supermarkets', 'Online retailers', 'Gyms and fitness centers', 'Local stores', and 'Other'."""

# Plotting the preferred purchase locations
plt.figure(figsize=(10, 6))
sns.barplot(y=purchase_location.index, x=purchase_location.values, orient='h')
plt.title('Preferred Purchase Locations')
plt.xlabel('Count')
plt.ylabel('Purchase Locations')
plt.show()

"""From the chart, we can see that:

'Supermarkets' are the most preferred location for purchasing energy drinks. This could be due to the convenience, variety of options, and competitive pricing usually offered by supermarkets.

'Online retailers' and 'Gyms and fitness centers' are the next most preferred locations. The popularity of online retailers could be attributed to the convenience and potential for home delivery, while gyms and fitness centers could be popular due to the association between energy drinks and exercise.

'Local stores' and 'Other' locations are less popular but still represent a significant portion of purchase locations.

These insights suggest that ensuring product availability in supermarkets, online retail platforms, and gyms and fitness centers could be key to reaching potential customers. Additionally, it could be beneficial to investigate the 'Other' locations to uncover any additional effective points of sale.
"""

# Extracting the preferred purchase locations data
purchase_location_tm = tm_df['Purchase_location'].value_counts()

purchase_location_tm

# Plotting the preferred purchase locations
plt.figure(figsize=(10, 6))
sns.barplot(y=purchase_location_tm.index, x=purchase_location_tm.values, orient='h')
plt.title('Preferred Purchase Locations of Our Target Market')
plt.xlabel('Count')
plt.ylabel('Purchase Locations')
plt.show()

"""### What are the typical consumption situations for energy drinks among respondents?"""

# Extracting the typical consumption situations data
consumption_situation = data['Typical_consumption_situations'].value_counts()

consumption_situation

"""We analyzed the 'Typical_consumption_situations' column from the survey data, which provides information about the typical situations in which respondents consume energy drinks. The responses include 'Sports/exercise', 'Studying/working late', 'Social outings/parties', 'Driving/commuting', and 'Other'."""

# Plotting the typical consumption situations
plt.figure(figsize=(10, 6))
sns.barplot(y=consumption_situation.index, x=consumption_situation.values, orient='h')
plt.title('Typical Consumption Situations')
plt.xlabel('Count')
plt.ylabel('Consumption Situations')
plt.show()

"""From the chart, we can see that:

'Sports/exercise' is the most common situation in which respondents consume energy drinks. This suggests that many respondents associate energy drinks with physical activity and performance enhancement.

'Studying/working late' is the next most common consumption situation. This indicates that many respondents consume energy drinks for a boost of energy and focus during late-night study or work sessions.

'Social outings/parties', 'Driving/commuting', and 'Other' situations are less common but still represent a significant portion of consumption situations.

These insights suggest that marketing efforts could benefit from focusing on the benefits of the product in the most common consumption situations, such as during sports/exercise and when studying/working late. Further investigation into the 'Other' situations could also provide additional insights into how and when respondents typically consume energy drinks.
"""

# Extracting the typical consumption situations data
consumption_situation_tm = tm_df['Typical_consumption_situations'].value_counts()

consumption_situation_tm

# Plotting the typical consumption situations
plt.figure(figsize=(10, 6))
sns.barplot(y=consumption_situation_tm.index, x=consumption_situation_tm.values, orient='h')
plt.title('Typical Consumption Situations of Our Traget Market')
plt.xlabel('Count')
plt.ylabel('Consumption Situations')
plt.show()

"""### What factors influence respondents' purchase decisions, such as price range and limited edition packaging?"""

# Extracting the factors that influence purchase decisions
# 6.c. What factors influence respondents' purchase decisions, such as price range and limited edition packaging?
price_range = data['Price_range'].value_counts()
limited_edition_packaging = data['Limited_edition_packaging'].value_counts()

price_range, limited_edition_packaging

"""We analyzed the 'Price_range' and 'Limited_edition_packaging' columns from the survey data. The 'Price_range' column indicates the price range that respondents prefer for energy drinks, and the 'Limited_edition_packaging' column indicates whether respondents are interested in limited edition packaging."""

# Create subplots
fig, ax = plt.subplots(2, 1, figsize=(15, 12))

# Plot for price range
sns.barplot(x=price_range.index, y=price_range.values, ax=ax[0])
ax[0].set_title('Preferred Price Range')
ax[0].set_xlabel('Price Range')
ax[0].set_ylabel('Count')

# Plot for limited edition packaging
sns.barplot(x=limited_edition_packaging.index, y=limited_edition_packaging.values, ax=ax[1])
ax[1].set_title('Interest in Limited Edition Packaging')
ax[1].set_xlabel('Interest')
ax[1].set_ylabel('Count')

# Adjust the subplots for better layout
plt.tight_layout()

# Show the plots
plt.show()

"""From the charts, we can see that:

The most preferred price range among respondents is 50-99, followed by 100-150. This suggests that pricing the product within these ranges could appeal to a majority of potential customers.

Respondents are almost evenly split between being interested and not interested in limited edition packaging, with a significant portion being unsure. This indicates that while there might be a market for limited edition packaging, further research might be needed to determine its potential success.

These insights suggest that pricing and packaging could significantly influence the purchase decisions of potential customers. Therefore, it could be beneficial to consider these factors when developing pricing and packaging strategies.
"""

data.groupby(['Limited_edition_packaging','Price_range']).count()

"""## Product Development

### Which area of business should we focus more on our product development? (Branding/taste/availability)
"""

# Creating a new DataFrame 'ProductDev' and dropping inconsistent responses
ProductDev = data[~((data['Heard_before'] == 'No') & (data['Taste_experience'] != 0))]

# Checking for taste more than 1 standard deviation less than the mean
taste = ProductDev[ProductDev['Taste_experience'] < ProductDev['Taste_experience'].mean() - ProductDev['Taste_experience'].std()]

# Checking for 'Not available locally'
availability = ProductDev[ProductDev['Reasons_preventing_trying'] == 'Not available locally']

# Checking for negative branding
branding = ProductDev[(ProductDev['Brand_perception'] == 'Negative') | (ProductDev['Brand_perception'] == 'Neutral')]

# Counting the number of respondents for each focus area
focus_areas_counts = {
    'Taste': len(taste),
    'Availability': len(availability),
    'Branding': len(branding)
}

focus_areas_counts

"""The bar chart represents the three focus areas for product development: taste, availability, and branding. This time, we considered the following conditions:

Taste scores that are more than one standard deviation below the mean.
Product availability issues where it is not available locally.
Negative brand perceptions among respondents.
"""

# Create a DataFrame for visualization
focus_areas_df = pd.DataFrame({
    'Focus Area': list(focus_areas_counts.keys()),
    'Count': list(focus_areas_counts.values())
})

# Plotting the focus areas
plt.figure(figsize=(10, 6))
sns.barplot(x='Focus Area', y='Count', data=focus_areas_df)
plt.title('Focus Areas for Product Development')
plt.ylabel('Count')
plt.show()

"""From the chart, we can see that:

Taste: There is a significant number of respondents (around 1135) whose taste experience scores are more than one standard deviation below the mean. This suggests that taste is a crucial area where the product could potentially be improved.

Availability: There are over 1000 respondents who haven't tried the product because it's not available locally. This suggests that improving the product's availability could be beneficial.

Branding: There are over 800 respondents who have a negative perception of the brand. This indicates that enhancing the brand's reputation and perception could be a

# Secondary Insights

## Which Categories are Associated with a positive brand perception?
"""

from scipy.stats import chi2_contingency

# Select the categorical columns to analyze
categorical_columns = ['Consume_frequency', 'Consume_time', 'Consume_reason', 'Heard_before',
                       'General_perception', 'Tried_before', 'Health_concerns',
                       'Interest_in_natural_or_organic', 'Marketing_channels',
                       'Packaging_preference', 'Limited_edition_packaging',
                       'Price_range', 'Purchase_location', 'Typical_consumption_situations']

# Perform chi-square test for each categorical column
association_results = {}
for column in categorical_columns:
    contingency_table = pd.crosstab(data[column], data['Brand_perception'])
    chi2, p, _, _ = chi2_contingency(contingency_table)
    association_results[column] = {'chi2': chi2, 'p-value': p}

# Sort the results by p-value in ascending order
sorted_results = sorted(association_results.items(), key=lambda x: x[1]['p-value'])

sorted_results

alpha = 0.10

for column, result in sorted_results:
    p_value = result['p-value']
    if p_value <= alpha:
        print(f"Reject null hypothesis for {column} (p-value: {p_value})")
    else:
        print(f"Fail to reject null hypothesis for {column} (p-value: {p_value})")

import matplotlib.pyplot as plt

# Extract the column names and p-values from the sorted results
columns = [item[0] for item in sorted_results]
p_values = [item[1]['p-value'] for item in sorted_results]

# Plot the p-values
plt.bar(columns, p_values)
plt.title('Chi-square Test: Association with Brand Perception')
plt.xlabel('Categorical Columns')
plt.ylabel('p-value')
plt.xticks(rotation=75)
plt.show()

"""###"""

# Calculate the proportion of positive brand perceptions for each value of 'Consume_time'
consume_time_proportions = data[data['Brand_perception'] == 'Positive']['Consume_time'].value_counts(normalize=True)

consume_time_proportions

# Plot the proportions
plt.bar(consume_time_proportions.index, consume_time_proportions.values)
plt.title('Proportions of Positive Brand Perceptions by Consume Time')
plt.xlabel('Consume Time')
plt.ylabel('Proportion')
plt.xticks(rotation=60)
plt.show()

# Calculate the proportion of positive brand perceptions for each value of 'Consume_time'
Consume_reason_proportions = data[data['Brand_perception'] == 'Positive']['Consume_reason'].value_counts(normalize=True)

Consume_reason_proportions

# Plot the proportions
plt.bar(Consume_reason_proportions.index, Consume_reason_proportions.values)
plt.title('Proportions of Positive Brand Perceptions by Consume Reason')
plt.xlabel('Consume Reason')
plt.ylabel('Proportion')
plt.xticks(rotation=60)
plt.show()

# Calculate the proportion of positive brand perceptions for each value of 'Marketing_channels'
marketing_channels_proportions = data[data['Brand_perception'] == 'Positive']['Marketing_channels'].value_counts(normalize=True)

marketing_channels_proportions

plt.bar(marketing_channels_proportions.index, marketing_channels_proportions.values)
plt.title('Proportions of Positive Brand Perceptions by Marketing Channels')
plt.xlabel('Marketing Channels')
plt.ylabel('Proportion')
plt.xticks(rotation=60)
plt.show()

import statsmodels.stats.proportion as smp

# Calculate the proportions
tm_df_count = len(tm_df)
data_count = len(data)

# Calculate the confidence interval
lower, upper = smp.proportion_confint(tm_df_count, data_count, alpha=0.05)

lower, upper

!jupyter nbconvert --to script "Runtime DA Harsh Rana.ipynb"

